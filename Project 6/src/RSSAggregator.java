import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Shiguang Ding (ding.752)
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        int i = getChildElement(channel, "title");
        int link = getChildElement(channel, "link");
        int descripe = getChildElement(channel, "description");
        String link1 = channel.child(link).child(0).label();
        String title = "empty title";
        String description = "no description";
        if (channel.child(i).numberOfChildren() > 0) {
            title = channel.child(i).child(0).label();
        }
        if (channel.child(descripe).numberOfChildren() > 0) {
            description = channel.child(descripe).child(0).label();
        }
        out.println("<title>" + title + "</title>");

        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a herf=\"" + link1 + "\">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println("<table border=\"1\">\n" + "       <tr>\n"
                + "       <th>Date</th>\n" + "       <th>Source</th>\n"
                + "       <th>News</th>\n" + "       </tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        int child = xml.numberOfChildren();
        int i = 0;
        int index = -1;
        while (i < child && index == -1) {
            if (xml.child(i).label().equals(tag)) {
                index = i;
            }
            i++;
        }
        return index;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");
        int i = getChildElement(item, "pubDate");
        if (i != -1) {
            out.println("<td>" + item.child(i).child(0).label() + "</td>");
        } else {
            out.print("<td>not exist  </td>");
        }
        int j = getChildElement(item, "source");
        int k = getChildElement(item, "link");
        if (j != -1) {
            if (k != -1) {
                out.println("<td>" + "<a href=" + "\""
                        + item.child(k).child(0).label() + "\">"
                        + item.child(j).child(0).label() + "</a>" + "</td>");
            } else {
                out.println("<td>" + item.child(j).child(0).label() + "</td>");
            }
        } else {
            out.print("<td> N/A </td>");
        }
        int s = getChildElement(item, "title");
        if (s != -1) {
            if (item.child(s).numberOfChildren() != 0) {
                out.println("<td>" + item.child(s).child(0).label() + "</td>");
            }
        } else if (getChildElement(item, "description") != -1) {
            out.println(
                    "<td>" + item.child(getChildElement(item, "description"))
                            .child(0).label() + "</td>");
        }
        out.println("</tr>");
    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        XMLTree tree = new XMLTree1(url);

        if (tree.label().equals("rss")) {

            if (tree.hasAttribute("version")) {

                if (tree.attributeValue("version").equals("2.0")) {
                    XMLTree channel = tree.child(0);
                    SimpleWriter fout = new SimpleWriter1L(file);
                    outputHeader(channel, fout);

                    for (int i = 0; i < channel.numberOfChildren(); i++) {
                        if (channel.child(i).label().equals("item")) {
                            XMLTree item = channel.child(i);
                            processItem(item, fout);
                        }

                    }
                    outputFooter(fout);
                    fout.close();
                    out.println("web" + file + "is created");
                }
            }
        } else {
            out.println(file + "can not create!!!");
        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        out.println("Enter a feed:");
        String str1 = in.nextLine();
        XMLTree tree = new XMLTree1(str1);
        while (!tree.label().equals("feeds")) {
            out.println("Enter a feed:");
            str1 = in.nextLine();
            tree = new XMLTree1(str1);
        }

        String str2 = tree.label();
        XMLTree channel = tree.child(0);
        out.println("Enter a file name:");
        String indexfilename = in.nextLine();
        SimpleWriter fout = new SimpleWriter1L(indexfilename);
        fout.println("<html>");
        fout.println("<head>");
        fout.println("<title>" + tree.attributeValue("title") + "</title>");
        fout.println("</head>");
        fout.println("<bodyl>");
        fout.println("<h2>" + tree.attributeValue("title") + "</h2>");

        fout.println("<ul>");

        int sum = tree.numberOfChildren();
        for (int i = 0; i < sum; i++) {
            String url2 = tree.child(i).attributeValue("url");
            String name2 = tree.child(i).attributeValue("name");
            String file2 = tree.child(i).attributeValue("file");
            XMLTree xmltree = new XMLTree1(url2);
            if (xmltree.label().equals("rss")) {

                if (xmltree.hasAttribute("version")) {

                    if (xmltree.attributeValue("version").equals("2.0")) {

                        fout.println("<li><a href\"" + file2 + "\">" + name2
                                + "</a></li>");

                    }

                }

            } else {
                fout.println("<li>(error)</li>");
            }

            processFeed(url2, file2, out);
        }
        fout.println("</ul>");
        fout.println("</body>");
        fout.println("</html>");

        in.close();
        out.close();
        fout.close();
    }

}
