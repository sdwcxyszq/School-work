import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 * 
 * @author Put your name here
 * 
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }
    /**
    * Processes one XML RSS (version 2.0) feed from a given URL converting it
    * into the corresponding HTML output file.
    * 
    * @param url
    *            the URL of the RSS feed
    * @param file
    *            the name of the HTML output file
    * @param out
    *            the output stream to report progress or errors
    * @updates out.content
    * @requires out.is_open
    * @ensures <pre>
    * [reads RSS feed from url, saves HTML document with table of news items
    *   to file, appends to out.content any needed messages]
    * </pre>
    */
   private static void processFeed(String url, String file, SimpleWriter out) {
       XMLTree xml = new XMLTree1(url);
       while(!xml.attributeValue("version").equals("2.0")) {
    	    return;
       }
       XMLTree channel=xml.child(0); 
       SimpleWriter output = new SimpleWriter1L(file);
       outputHeader(channel,output);
       for(int index=0;index<channel.numberOfChildren();index++) {
    	   if(channel.child(index).label().equals("item")) {
       	processItem(channel.child(index),output);
    	   }
       }
       outputFooter(output);
   }
   /**
    * Processes one XML RSS (version 2.0) feed from a given URL converting it
    * into the corresponding HTML output file.
    * 
    * @param url
    *            the URL of the RSS feed
    * @param file
    *            the name of the HTML output file
    * @param out
    *            the output stream to report progress or errors
    * @updates out.content
    * @requires out.is_open
    * @ensures <pre>
    * [reads RSS feed from url, saves HTML document with table of news items
    *   to file, appends to out.content any needed messages]
    * </pre>
    */
   private static void xmlList(XMLTree feed,String file, SimpleWriter output) {
	   output.println("<html>");
	   output.println("<head>");
	   output.print("<title>");
	   if(feed.hasAttribute("title")) {
		   if(!feed.attributeValue("title").equals("")) {
			   output.print(feed.attributeValue("title"));
		   }
		   else {
			   output.print("No title available");
		   }
	   }
	   else {
		   output.print("No title available");
	   }
	   output.println("</title>");
	   output.println("</head>");
	   output.println("<body>");
	   output.print("<h2>");
	   if(feed.hasAttribute("title")) {
		   if(!feed.attributeValue("title").equals("")) {
			   output.print(feed.attributeValue("title"));
		   }
		   else {
			   output.print("No title available");
		   }
	   }
	   else {
		   output.print("No title available");
	   }
	   output.println("</h2>");
	   output.println("<ul>");
	   for(int index=0;index<feed.numberOfChildren();index++) {
		   output.println("<li><a href="+'"'+feed.child(index).attributeValue("file")+'"'+">"+feed.child(index).attributeValue("name")+"</a></li>");
	   }
	   output.close();
   }
    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     * 
     * <html>
     * <head>
     * <title>the channel tag title as the page title</title>
     * </head>
     * <body>
     *  <h1>the page title inside a link to the <channel> link</h1>
     *  <p>the channel description</p>
     *  <table border="1">
     *   <tr>
     *    <th>Date</th>
     *    <th>Source</th>
     *    <th>News</th>
     *   </tr>
     * 	
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        
        /*
         * TODO: fill in body
         */
        out.println("<html>");
        out.println("<head>");
        out.print("<title>");
        if(getChildElement(channel,"title")!=-1) {
	        if(!channel.child(getChildElement(channel,"title")).child(0).label().equals("")) {
	        	out.println(channel.child(getChildElement(channel,"title")).child(0).label());
	        }
	        else {
	        	out.println("Empty Title");
	        }
        }
        else {
        	out.print("Empty Title");
        }
        out.println("</title");
        out.println("</head>");
        out.println("<body>");
        XMLTree title = channel.child(getChildElement(channel,"title"));
        if(!channel.child(getChildElement(channel,"link")).child(0).label().equals("")) {
        	out.println("<h1><a href="+'"'+channel.child(getChildElement(channel,"link")).child(0).label()+'"'+">"+title.child(0).label()+"</a></h1>");
        }
        else {
        	out.println("<h1>"+title.child(0).label()+"</h1>");
        }
        out.print("<p>");
        if(!channel.child(getChildElement(channel,"description")).child(0).label().equals("")) {
        	out.print(channel.child(getChildElement(channel,"description")).child(0).label());
        }
        else {
        	out.print("No description");
        }
        out.println("</p>");
        out.println("<table border="+'"'+1+'"'+">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file.  These are the
     * expected elements generated by this method:
     * 
     *  </table>
     * </body>
     * </html>
     * 
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     * 
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        /*
         * TODO: fill in body
         */
        for(int index=0;index<xml.numberOfChildren();index++) {
        	if(xml.child(index).label().equals(tag)) {
        		return index;
        	}
        }
        return -1;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     * 
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires
     * [the label of the root of item is an <item> tag] and out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        if(item.isTag()&&item.label().equals("item")) {
        	out.println("<tr>");
        	if(getChildElement(item,"pubDate")!=-1&&!item.child(getChildElement(item,"pubDate")).child(0).label().equals("")) {
        		if(!item.child(getChildElement(item,"pubDate")).child(0).label().equals("")) {
        			out.println("<td>"+item.child(getChildElement(item,"pubDate")).child(0).label()+"</td>");
        		}
        		
        	}
        	else {
    			out.println("<td>No data available</td>");
    		}
        	if(getChildElement(item,"source")!=-1) {
        		XMLTree src= item.child(getChildElement(item,"source"));
        		if(item.child(getChildElement(item,"source")).numberOfChildren()>0&&!item.child(getChildElement(item,"source")).child(0).label().equals("")) {
        				out.println("<td><a href="+'"'+src.attributeValue("url")+'"'+">"
        						+item.child(getChildElement(item,"source")).child(0).label()+"</a></td>");
        		}
        		else {
        			out.println("<td>No source available</td>");
        		}
        	}
        	else {
        		out.println("<td>No source available</td>");
        	}
        	if(getChildElement(item,"title")!=-1) {
        		if(item.child(getChildElement(item,"title")).numberOfChildren()>0&&!item.child(getChildElement(item,"title")).child(0).label().equals("")) {
        				if(getChildElement(item,"link")!=-1&&!item.child(getChildElement(item,"link")).child(0).label().equals("")) {
        				out.println("<td><a href="+'"'+item.child(getChildElement(item,"link")).child(0).label()+'"'+">"
        						+item.child(getChildElement(item,"title")).child(0).label()+"</a></td>");
        			}
        				else {
        					out.println("<td>"+item.child(getChildElement(item,"title")).child(0).label()+"</td>");
        				}
        			}
        			else {
        			out.println("<td>"+item.child(getChildElement(item,"title")).child(0).label()+"</td>");
        			}
        		}
        		else {
        			if(item.child(getChildElement(item,"description")).numberOfChildren()>0&&!item.child(getChildElement(item,"description")).child(0).label().equals("")) {
        				if(getChildElement(item,"link")!=-1&&!item.child(getChildElement(item,"link")).child(0).label().equals("")) {
            				out.println("<td><a href="+'"'+item.child(getChildElement(item,"link")).child(0).label()+'"'+">"
            						+item.child(getChildElement(item,"dsecription")).child(0).label()+"</a></td>");
            			}
            				else {
            					out.println("<td>"+item.child(getChildElement(item,"description")).child(0).label()+"</td>");
            				}
        			}
        			else {
        				out.println("<td>No title available</td>");
        			}
        		}
        	}
        	out.println("</tr>");
        
        
    }

    /**
     * Main method.
     * 
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        /*
         * TODO: fill in body
         */
        out.print("Enter the url of the xml:");
        String url = in.nextLine();
        out.print("Enter the name of the output file:");
        String file = in.nextLine();
        SimpleWriter output = new SimpleWriter1L(file+".html");
        XMLTree feed=new XMLTree1(url);
        xmlList(feed,file,output);
        for(int index=0;index<feed.numberOfChildren();index++) {
        	processFeed(feed.child(index).attributeValue("url"),feed.child(index).attributeValue("file"),out);
        }
        in.close();
        out.close();
    }}
