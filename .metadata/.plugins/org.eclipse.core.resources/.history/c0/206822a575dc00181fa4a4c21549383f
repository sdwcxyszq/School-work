import components.naturalnumber.NaturalNumber;
import components.naturalnumber.NaturalNumber1L;
import components.naturalnumber.NaturalNumber2;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;

/**
 * Program with implementation of {@code NaturalNumber} secondary operation
 * {@code root} implemented as static method.
 *
 * @author Put your name here
 *
 */
public final class NaturalNumberRoot {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private NaturalNumberRoot() {
    }

    /**
     * Converts the given {@code NaturalNumber} to a {@code String} with commas.
     * 
     * @param n
     *            the number
     * @return the {@code String} with commas
     * @ensures toStringWithCommas = [String representation of n with commas]
     */
    public static String toStringWithCommas(NaturalNumber n) {
    	NaturalNumber num = new NaturalNumber2(n);
    	NaturalNumber thousand = new NaturalNumber2(1000);
    	String str = "";
    	if(num.compareTo(thousand)<0) {
    		return n.toString();
    	}
    	else {
    		int remainder1 = n.divideBy10();
    		int remainder2 = n.divideBy10();
    		int remainder3 = n.divideBy10();
    		str=toStringWithCommas(n)+","+str;
    		str= str+remainder3+remainder2+remainder1;
    	}
    	return str;
    }
    public static void increment(NaturalNumber n) {
    	int remainder = n.divideBy10();
    	remainder++;
    	if(remainder==10) {
    		remainder=0;
    		increment(n);
    	}
    	n.multiplyBy10(remainder);
    }
    public static int power(int n,int p) {
    	if(p==0) {
    		return 1;
    	}
    	else {
    		p--;
    		return n*power(n,p);
    	}
    }
    /**
     * Returns the number of digits of {@code n}.
     * 
     * @param n
     *            {@code NaturalNumber} whose digits to count
     * @return the number of digits of {@code n}
     * @ensures numberOfDigits = [number of digits of n]
     */
    private static int numberOfDigits(NaturalNumber n) {
    	int remainder=n.divideBy10();
    	int total=1;
    	if(!n.isZero()) {
    		total=1+numberOfDigits(n);
    	}
    	n.multiplyBy10(remainder);
    	return total;
    }
    /**
     * Returns the sum of the digits of {@code n}.
     * 
     * @param n
     *            {@code NaturalNumber} whose digits to add
     * @return the sum of the digits of {@code n}
     * @ensures sumOfDigits = [sum of the digits of n]
     */
    private static int sumOfDigits(NaturalNumber n) {
    	int remainder=n.divideBy10();
    	int total=0;
    	if(!n.isZero()) {
    		total=remainder+sumOfDigits(n);
    	}
    	n.multiplyBy10(remainder);
    	return total;
    }

	/**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleWriter out = new SimpleWriter1L();
        NaturalNumber num = new NaturalNumber2(23);
        out.println(sumOfDigits(num));
        
    }

}